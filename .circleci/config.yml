# Python CircleCI 2.0 configuration fil
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2

jobs:
  build:
    docker:
      - image: circleci/python:3.7.8-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install project dependencies
          command: |
            sudo apt-get update
            sudo apt-get install python3-venv
            python3 -m venv venv
            . venv/bin/activate
            make install
            ls -lrt ./venv
      - save_cache:
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - ./venv

  test-app:
    docker:
    - image: circleci/python:3.7.8-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-

      - run:
          name: run lint
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
            . venv/bin/activate
            make lint 
               
  build-dockerimage:
    docker:
    - image: circleci/python:3.7.8-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - setup_remote_docker:
          version: 19.03.13  

      - run:
          name: create docker image
          command: |
            . venv/bin/activate
            chmod 777 run_docker.sh make_prediction.sh upload_docker.sh
            ./run_docker.sh
            docker ps -a
            
      - run:
          name: publish docker image
          command: |
            echo $DockerPassword | docker login --username tarungirdhar1980 --password-stdin
            ./upload_docker.sh 
  create-cluster: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip 
      - run:
          name: create taruncapstone cluster if it doesn't exists
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            export AWS_PAGER=""
            export eksclusterlist=$(aws eks  list-clusters --output text)
            echo $eksclusterlist
            isClusterPresent=`echo $eksclusterlist | sed '/^$/d' | grep -wc taruncapstone || true`
            echo $isClusterPresent
            if [ $isClusterPresent == 1 ]
            then           
            echo "cluster already exists"
            else
            echo "cluster does not exists.. creating cluster.. please wait"
            eksctl create cluster --name taruncapstone --version 1.17 --nodegroup-name nworkercap --node-type t2.micro --nodes 2 --nodes-min 1 --nodes-max 2 --region ap-south-1 --node-zones=ap-south-1a,ap-south-1b --node-ami-family=Ubuntu1804
            fi
 
  create-deployment:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy image to Kubernetes
          command: |
            aws eks --region ap-south-1 update-kubeconfig --name taruncapstone
            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
            kubectl apply -f deployment.yml
            sleep 5m

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          cluster name
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
            kubectl get nodes
            kubectl get deployment
            kubectl get pod -o wide
            kubectl get service/udacitycapstone-lb
          name: Test cluster
       
workflows:
  default:
    jobs:
      - build
      - test-app:
          requires: [build]
      - build-dockerimage:
           requires: [test-app]
      - create-cluster:
          requires: [build-dockerimage]
      - create-deployment:
           requires: [create-cluster]
      - aws-eks/update-container-image:
          cluster-name: taruncapstone
          container-image-updates: 'taruncapstone=tarungirdhar1980/taruncapstone'
          post-steps:
            - kubernetes/delete-resource:
                resource-names: taruncapstone
                resource-types: deployment
                wait: true
          record: true
          requires:
            - create-deployment
          resource-name: deployment/visheshcapstone
      - test-cluster:
          cluster-name: taruncapstone
          requires: [create-deployment]
