# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more detail
#
version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2

jobs:
  build:
    docker:
      - image: circleci/python:3.7.8-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install project dependencies
          command: |
            sudo apt-get update
            sudo apt-get install python3-venv
            python3 -m venv venv
            . venv/bin/activate
            make install
            ls -lrt ./venv

      - save_cache:
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - ./venv

  lint:
    docker:
    - image: circleci/python:3.7.8-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-

      - run:
          name: run lint
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
            . venv/bin/activate
            make lint 
               
  build-dockerimage:
    docker:
    - image: circleci/python:3.7.8-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - setup_remote_docker:
          version: 19.03.13  

      - run:
          name: create docker image
          command: |
            . venv/bin/activate
            chmod 777 run_docker.sh make_prediction.sh upload_docker.sh
            ./run_docker.sh
            docker ps -a
            
      - run:
          name: publish docker image
          command: |
            echo $DockerPassword | docker login --username tarungirdhar1980 --password-stdin
            ./upload_docker.sh 

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          taruncapstone
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/taruncapstone

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
            kubectl get nodes
            kubectl get deployment
            kubectl get pod -o wide
            kubectl get service/tarun-lb
          name: Test cluster
       
workflows:
  default:
    jobs:
      - build
      - lint:
          requires: [build]
      - build-dockerimage:
           requires: [lint]
      - aws-eks/create-cluster:
          cluster-name: taruncapstone
      - create-deployment:
          cluster-name: taruncapstone
          requires:
            - aws-eks/create-cluster
      - aws-eks/update-container-image:
          cluster-name: taruncapstone
          container-image-updates: 'taruncapstone=tarungirdhar1980/tarunfinalproject'
          post-steps:
            - kubernetes/delete-resource:
                resource-names: taruncapstone
                resource-types: deployment
                wait: true
          record: true
          requires:
            - create-deployment
          resource-name: deployment/taruncapstone
      - test-cluster:
          cluster-name: taruncapstone
          requires:
            - aws-eks/update-container-image
